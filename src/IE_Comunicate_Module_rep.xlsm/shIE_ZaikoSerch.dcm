VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "shIE_ZaikoSerch"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Option Explicit
#If DebugDB Then
    'ローカル環境の時のみ使う定数
    '在庫情報 偽分割 0〜3まで作った
    Const LOCAL_XLS_FILENAME As String = "Zaiko_{0}_Local.xls"
    '在庫情報偽分割ファイルの分割最小値と最大値
    Const ZAIKO_LOCAL_SPLIT_MIN As Long = 0
    Const ZAIKO_LOCAL_SPLIT_MAX As Long = 3
#End If
Public Sub ShowfrmPartMaster()
    Call ShowfrmInvPartsMaster
End Sub
Public Sub TanaCSVtoDB()
    '最初にCSVファイルを選択してもらう
    Dim strCSVFullPath As String
    'カレントディレクトリをダウンロードディレクトリに変更する
    Call ChCurrentDirW(GetDownloadPath)
    MsgBox "デイリー棚卸でダウンロードしたCSVファイルを選択して下さい"
    strCSVFullPath = CStr(Application.GetOpenFilename("CSVファイル,*.csv", 1, "デイリー棚卸でダウンロードしたCSVファイルを選択して下さい"))
    If strCSVFullPath = "False" Then
        'キャンセルボタンが押された
        MsgBox "キャンセルしました"
        Exit Sub
    End If
    Dim clsINVDBRegistfrom As clsINVDB
    Set clsINVDBRegistfrom = CreateclsINVDB
    Dim clsGetIERegistfrom As clsGetIE
    Set clsGetIERegistfrom = New clsGetIE
    '以下、インスタンス共有のための変数宣言
    Dim objExcelShare As Excel.Application
    Set objExcelShare = New Excel.Application
    Dim clsADOShare As clsADOHandle
    Set clsADOShare = CreateclsADOHandleInstance
    Dim clsEnumShare As clsEnum
    Set clsEnumShare = CreateclsEnum
    Dim clsSQLBcSahere As clsSQLStringBuilder
    Set clsSQLBcSahere = CreateclsSQLStringBuilder
    Dim strZaikSHFullPath As String
    Call clsINVDBRegistfrom.UpsertINVPartsMasterfromZaikoSH(strCSVFullPath, objExcelShare, clsINVDBRegistfrom, clsADOShare, clsEnumShare, clsSQLBcSahere, True)
    GoTo CloseAndExit
CloseAndExit:
    If Not clsADOShare Is Nothing Then
        clsADOShare.CloseClassConnection
        Set clsADOShare = Nothing
    End If
    If Not objExcelShare Is Nothing Then
        objExcelShare.Quit
        Set objExcelShare = Nothing
    End If
    If Not clsGetIERegistfrom Is Nothing Then
        Set clsGetIERegistfrom = Nothing
    End If
    Set clsINVDBRegistfrom = Nothing
    Set clsEnumShare = Nothing
    Set clsSQLBcSahere = Nothing
End Sub
Public Sub btnZaikoSerch_Click()
    '''手配コードを指定して在庫情報シートをDLし、その情報をDictionaryに格納
    '''dicTehaiSh は key に Tehaicode を Value に シートフルパスを入れる
    Dim dicTehaiSh As Dictionary
    Set dicTehaiSh = New Dictionary
    '実際は繰り返しUpsertを行う事になるので、AdoHandleインスタンスも共有する
    Dim adoUpsert As clsADOHandle
    Set adoUpsert = CreateclsADOHandleInstance
    '同様に繰り返し使用に備え、clsEnumもインスタンス共有する
    Dim EnumUpsert As clsEnum
    Set EnumUpsert = CreateclsEnum
    'Local環境と本番環境で対象ファイルの取得方法を変える
#If DebugDB Then
    'ローカルテスト
    MsgBox "DebugDB = 1"
    'DBディレクトリはそのまま
    'ファイルは予め作成してある物を使用
    Dim sqlBC As clsSQLStringBuilder
    Set sqlBC = CreateclsSQLStringBuilder
    Dim dicAppendFormat As Dictionary
    Set dicAppendFormat = New Dictionary
    Dim longZaikoLocalSplitCount As Long
    '各ファイル名に対して処理を実行
'    For longZaikoLocalSplitCount = ZAIKO_LOCAL_SPLIT_MIN To ZAIKO_LOCAL_SPLIT_MAX
'        '最初にAppendFormat用のdictionaryをクリア
'        dicAppendFormat.RemoveAll
'        dicAppendFormat.Add 0, CStr(longZaikoLocalSplitCount)
'        Dim fsoLocalZaiko As FileSystemObject
'        Set fsoLocalZaiko = New FileSystemObject
''        Dim adoLocalZaiko As clsADOHandle
''        Set adoLocalZaiko = CreateclsADOHandleInstance
'        Dim strLocalZaikoFullPath As String
'        'Local在庫情報フルパス名取得
'        'ディレクトリはclsAdoのデフォルトDBPath、ファイル名は連番のあれ
'        strLocalZaikoFullPath = fsoLocalZaiko.BuildPath(adoUpsert.DBPath, sqlBC.ReplaceParm(LOCAL_XLS_FILENAME, dicAppendFormat))
'        'ファイル存在確認し、ファイルが存在する場合のみdicTehaiShに追加してやる
'        'Local環境の場合は、keyはファイルの偽分割番号を入れる
'        If fsoLocalZaiko.FileExists(strLocalZaikoFullPath) Then
'            'ファイルが存在する場合
'            dicTehaiSh.Add CStr(longZaikoLocalSplitCount), strLocalZaikoFullPath
'        End If
'    Next longZaikoLocalSplitCount
    '各ファイル（在庫情報）からDBに登録する
    'CommonPartsのclsINVDBにメソッドを追加するのがいいかも
    'ファイルはダイアログから選択する
    'DBディレクトリをカレントにする
    Call ChCurrentDirW(adoUpsert.DBPath)
    Dim strDialogFileName As String
    strDialogFileName = Application.GetOpenFilename
    If strDialogFileName = "False" Then
        'キャンセルが押されたら文字列のFalseが帰ってくるらしい・・・
        Dim clsGetIEZaikoserchTehaiCode As clsGetIE
        Set clsGetIEZaikoserchTehaiCode = New clsGetIE
        '手配コード空白でDLし、結果のファイル名をセットする
        strDialogFileName = modZaikoSerch.ZaikoSerchbyTehaiCode("", clsGetIEZaikoserchTehaiCode)
        If strDialogFileName = "" Then
            '帰ってきたファイル名が空だったら抜ける
            Exit Sub
        End If
    End If
    dicTehaiSh.Add 1, strDialogFileName
    Dim INVTehaiTest As clsINVDB
    Set INVTehaiTest = CreateclsINVDB
    Dim varKey As Variant
    Dim longAffectedRows As Long
    'インスタンス共有のため宣言
    Dim objExcelShare As Excel.Application
    Set objExcelShare = New Excel.Application
    Dim clsSqlBCShare As clsSQLStringBuilder
    Set clsSqlBCShare = CreateclsSQLStringBuilder
    For Each varKey In dicTehaiSh
        '在庫情報シート名を引数にとり、その内容でT_INV_M_PartsをUPSertする
#If DontRemoveZaikoSH Then
        '試験中でファイル消したくない時
        '最後の引数にTrueをセットすると引数で指定したファイルを消去しないで残す
        longAffectedRows = longAffectedRows + INVTehaiTest.UpsertINVPartsMasterfromZaikoSH(dicTehaiSh(varKey), objExcelShare, INVTehaiTest, adoUpsert, EnumUpsert, clsSqlBCShare, True)
#Else
        '通常時はこっち、指定したファイルは消去する
        longAffectedRows = longAffectedRows + INVTehaiTest.UpsertINVPartsMasterfromZaikoSH(dicTehaiSh(varKey), objExcelShare, INVTehaiTest, adoUpsert, EnumUpsert, clsSqlBCShare, False)
#End If
        DebugMsgWithTime CStr(longAffectedRows) & " 件更新"
    Next varKey
    MsgBox "Updateレコード件数: " & CStr(longAffectedRows)
#Else
    '本番環境
    '''手配コードを指定して在庫情報シートをDLし、その情報をDictionaryに格納
    '''dicTehaiSh は key に Tehaicode を Value に シートフルパスを入れる
    Dim strTehaiCode As String
    strTehaiCode = CStr(Me.Range("TehaiCode").Value)
    If dicTehaiSh.Exists(strTehaiCode) Then
        '指定の手配コードが既にあった場合
        Exit Sub
    End If
    Dim clsGetIEZaikoserchTehaiCode As clsGetIE
    Set clsGetIEZaikoserchTehaiCode = New clsGetIE
     dicTehaiSh.Add strTehaiCode, modZaikoSerch.ZaikoSerchbyTehaiCode(strTehaiCode, clsGetIEZaikoserchTehaiCode)
     Dim INVTehaiTest As clsINVDB
     Set INVTehaiTest = CreateclsINVDB
     Dim strFilteredFileName() As String
     strFilteredFileName = INVTehaiTest.GetFilterRangeNameFromExcel(dicTehaiSh(strTehaiCode))
     If strFilteredFileName(0, 0) <> dicTehaiSh(strTehaiCode) Then
        'フィルタ掛ける前と掛けた後でファイル名が違った場合
        'まずは既存の項目を消去
        dicTehaiSh.Remove (strTehaiCode)
        '次にフィルタ掛かった後のファイル名を新たに追加
        dicTehaiSh.Add strTehaiCode, strFilteredFileName
     End If
     '取得したファイル名でSelect文を作ってみる
     MsgBox "FilterdFileName: " & vbCrLf & dicTehaiSh(strTehaiCode) & vbCrLf & _
     "SQL: " & vbCrLf & "SELECT * FROM " & strFilteredFileName(0, 1)
     Call ShowfrmSQLTest
#End If
End Sub
Public Sub UPSertDBUseFromZaikoSH()
    MsgBox "Update処理レコード総数は: " & CStr(RegistDBbyDailyTanaCSV) & " 件です"
End Sub
'''デイリー棚卸CSVからDBに登録する
'''戻り値 long 処理したファイルの総数
Public Function RegistDBbyDailyTanaCSV() As Long
    Dim clsINVDBRegistfrom As clsINVDB
    Set clsINVDBRegistfrom = CreateclsINVDB
    Dim clsGetIERegistfrom As clsGetIE
    Set clsGetIERegistfrom = New clsGetIE
    '以下、インスタンス共有のための変数宣言
    Dim objExcelShare As Excel.Application
    Set objExcelShare = New Excel.Application
    Dim clsADOShare As clsADOHandle
    Set clsADOShare = CreateclsADOHandleInstance
    Dim clsEnumShare As clsEnum
    Set clsEnumShare = CreateclsEnum
    Dim clsSQLBcSahere As clsSQLStringBuilder
    Set clsSQLBcSahere = CreateclsSQLStringBuilder
    Dim strZaikSHFullPath As String
    '手配コードを指定せずに全件の在庫情報シートをDLし、フルパスを取得する
    strZaikSHFullPath = modZaikoSerch.ZaikoSerchbyTehaiCode("", clsGetIERegistfrom)
    '指定の在庫情報ファイルでDB PartsMasterをUPdateし、処理レコード数を受け取る
    RegistDBbyDailyTanaCSV = clsINVDBRegistfrom.UpsertINVPartsMasterfromZaikoSH(strZaikSHFullPath, objExcelShare, clsINVDBRegistfrom, clsADOShare, clsEnumShare, clsSQLBcSahere)
'管理課を指定した上で在庫情報を一括DLすると、サイズ的に問題なくなったためこちらの方法を標準とする
'clsINVDBのUpsertメソッドにファイル選択機能を付加し、代用とする
'#If DebugDB Then
'    MsgBox "DebugDB = 1"
'#End If
'    '棚卸CSVを指定し、手配コード先頭n文字のリストを受け取る
'    '当面の間はCSVファイルを手動で選択する
'
'    Dim arrstrTeheiCode4Digit() As String
'    Dim clsINVDBCsv As clsINVDB
'    Set clsINVDBCsv = CreateclsINVDB
'    Dim clsSqlBCCSV As clsSQLStringBuilder
'    Set clsSqlBCCSV = CreateclsSQLStringBuilder
'    '共有インスタンスのためにクラス変数定義
'    Dim clsADOCsv As clsADOHandle
'    Set clsADOCsv = CreateclsADOHandleInstance
'    Dim clsEnumCSV As clsEnum
'    Set clsEnumCSV = CreateclsEnum
'    Dim clsGetIECSV As clsGetIE
'    Set clsGetIECSV = New clsGetIE
'    '先頭n文字のリスト取得
'    arrstrTeheiCode4Digit = clsSqlBCCSV.ReturnNdigitTehaiCodeFromCSV("", 1, clsADOCsv, clsINVDBCsv, clsEnumCSV)
'    If Not IsRedim(arrstrTeheiCode4Digit) Then
'        '初期化されていない配列が帰ってきた
'        DebugMsgWithTime "RegistDBbyDailyTanaCSV: Return tehai 4digit array not initialized"
'        GoTo CloseAndExit
'        Exit Function
'    End If
'    Dim longArrayRowCounter As Long
'    Dim arrstrDownloadFileList() As String
'    ReDim arrstrDownloadFileList(UBound(arrstrTeheiCode4Digit))
'    For longArrayRowCounter = 0 To UBound(arrstrTeheiCode4Digit)
'        'StatusBarのプレフィックスに作業中ファイルの数を表示してやる
'        clsGetIECSV.PrefixStatusBar = "残りファイル数: " & CStr(longArrayRowCounter + 1) & " / " & CStr(UBound(arrstrTeheiCode4Digit) + 1)
'        '先頭2文字の手配コードについて在庫情報シートをダウンロードし、ファイル名を配列に格納する
'        arrstrDownloadFileList(longArrayRowCounter) = ZaikoSerchbyTehaiCode(arrstrTeheiCode4Digit(longArrayRowCounter), clsGetIECSV)
'        'DLしたファイルをDBに登録する
'        Dim longAffectedRows As Long
'        'UPSert実行し、処理レコード数の累計に足してやる
'        longAffectedRows = longAffectedRows + clsINVDBCsv.UpsertINVPartsMasterfromZaikoSH(arrstrDownloadFileList(longArrayRowCounter), clsINVDBCsv, clsADOCsv, clsEnumCSV)
'    Next longArrayRowCounter
'    '処理したレコードの総数を返す
''    RegistDBbyDailyTanaCSV = UBound(arrstrTeheiCode4Digit) + 1
'    RegistDBbyDailyTanaCSV = longAffectedRows
''    MsgBox "ファイル総数は: " & CStr(UBound(arrstrDownloadFileList) + 1) & " 個です"
'    GoTo CloseAndExit
'    Exit Function
'CloseAndExit:
'    If Not clsADOCsv Is Nothing Then
'        clsADOCsv.CloseClassConnection
'        Set clsADOCsv = Nothing
'    End If
'    If Not clsGetIECSV Is Nothing Then
'        'GetIE
'        Set clsGetIECSV = Nothing
'    End If
'    Set clsINVDBCsv = Nothing
'    Set clsEnumCSV = Nothing
'    Exit Function
CloseAndExit:
    If Not clsADOShare Is Nothing Then
        clsADOShare.CloseClassConnection
        Set clsADOShare = Nothing
    End If
    If Not objExcelShare Is Nothing Then
        objExcelShare.Quit
        Set objExcelShare = Nothing
    End If
    If Not clsGetIERegistfrom Is Nothing Then
        Set clsGetIERegistfrom = Nothing
    End If
    Set clsINVDBRegistfrom = Nothing
    Set clsEnumShare = Nothing
    Set clsSQLBcSahere = Nothing
End Function